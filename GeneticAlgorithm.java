package evolutionaryalgorithms;

/**
 * Implements genetic algorithm to find optimum solution 
 */
public class GeneticAlgorithm{
    
    private static int sDefaultGeneLength = 10;

    private static final double HALF_RATE = 0.5;
    
    private static final double MUTATION_RATE = 0.015;
    
    private static final int TOURNAMENT_SIZE = 5;
        
    private static int[] solution = new int[sDefaultGeneLength];
    
    /**
     * 
     * @param newSolution the gene function as integer array
     * to be compared for finding fitness of the given gene
     * 
     * updates the solution gene
     */
    public static void setSolution(int[] newSolution){
        solution = newSolution;
    }
    
    /**
     * 
     * @param newSolution the gene function as string 
     * to be compared for finding fitness of the given gene
     * 
     * updates the solution gene
     */
    public static void setSolution(String newSolution){
        for(int i=0; i<sDefaultGeneLength; i++){
            char c = newSolution.charAt(i);
            solution[i] = c - '0';
        }
    }

    
    /**
     * 
     * @param particle the reference of the particle 
     * whose fitness one needs to find
     * 
     * @return the fitness function of the particle
     */
    public static int calculateFitness(ParticleGA particle){
        int fitness = 0;
        
        for(int i=0; i<sDefaultGeneLength; i++){
            if(solution[i]==particle.getGenes(i))fitness++;
        }
        
        return fitness;
    }
    
    /**
     * 
     * @param particle1 the reference of one particle (father)
     * @param particle2 the reference of another particle (mother)
     * @return Analogous to creating a child from father and mother
     * Each gene in child is randomly chosen either from father or 
     * mother to create a new child
     */
    private static ParticleGA crossover(ParticleGA particle1, ParticleGA particle2){
        ParticleGA newSol = new ParticleGA();
        
        for(int i=0; i<ParticleGA.getDefaultGeneLength(); i++){
            if(Math.random() <= HALF_RATE)
                newSol.setGenes(i, particle1.getGenes(i));
            else 
                newSol.setGenes(i, particle2.getGenes(i));
        }
        
        return newSol;
    }
    
    /**
     * 
     * @param particle the reference of the particle to mutate
     * Randomly changes a small fraction of genes from argument gene
     */
    private static void mutate(ParticleGA particle){
        for(int i=0; i<ParticleGA.getDefaultGeneLength(); i++){
            if(Math.random()<=MUTATION_RATE){
                int gene = (int)Math.round(Math.random());
                particle.setGenes(i, gene);
            }
        }
    }
    
    /**
     * 
     * @param pop the reference of the population in consideration
     * Randomly selects a set of particles to create another population
     * (a subset of particles) named tournament
     * @return the fittest element in the tournament population
     */
    private static ParticleGA tournamentSelection(PopulationGA pop){
        
        PopulationGA tournament = new PopulationGA(TOURNAMENT_SIZE, false);
        
        for(int i=0; i<TOURNAMENT_SIZE; i++){
            int randomId = (int) (Math.random()*pop.getPopulationSize());
            tournament.setParticle(i, pop.getParticle(randomId));
        }
        
        ParticleGA fittest = tournament.getFittest();
        return fittest;
    }
    
    /**
     * 
     * @param pop the reference of population to be evolved
     * @return    returns the next generation of the given population
     */
    public static PopulationGA evolvePopulation(PopulationGA pop){
        //Create next generation of population
        PopulationGA newPopulation = new PopulationGA(pop.getPopulationSize(), false);
        
        //Keep the best individual from the current generation
        newPopulation.setParticle(0, pop.getFittest());
        
        //Create children by selecting the best parents from subset of current generation
        for(int i=1; i<pop.getPopulationSize(); i++){
            ParticleGA father = tournamentSelection(pop);
            ParticleGA mother = tournamentSelection(pop);
            ParticleGA child = crossover(father, mother);
            newPopulation.setParticle(i, child);
        }
        
        //Mutate the children generated by varying a very small fraction of gene sequence
        for(int i=1; i<newPopulation.getPopulationSize(); i++){
            mutate(newPopulation.getParticle(i));
        }
        
        //Prints the next generation of population to check correctness of algorithm
        PopulationGA.print(newPopulation);
        return newPopulation;
    }
    
    /*getters*/
    public static int getsDefaultGeneLength() {
        return sDefaultGeneLength;
    }

    /*setters*/
    public static void setsDefaultGeneLength(int sDefaultGeneLength) {
        GeneticAlgorithm.sDefaultGeneLength = sDefaultGeneLength;
    }
            
    /**
     * Executes genetic algorithm clustering method 
     */
    public static void execute(){
        //Iniatise the first generation of 10 genes
        PopulationGA generation = new PopulationGA(10 ,true);
        
        PopulationGA.print(generation);
        int generationCount = 1;
        
        // the method will keep on executing till a generation is reached which has a particle
        // with the best gene sequence (exactly same as the solution sequence)
        while(GeneticAlgorithm.calculateFitness(generation.getFittest())<sDefaultGeneLength){
            generation = GeneticAlgorithm.evolvePopulation(generation);
            generationCount++;
        }
        
        System.out.println("Generation " + generationCount);
    }
    
    /**
     * 
     * @param args
     * Function main is used for checking the correctness
     */
    public static void main(String[] args){
        ParticleGA p1 = new ParticleGA();
        ParticleGA p2 = new ParticleGA();
        GeneticAlgorithm.setSolution("1001001001");
        ParticleGA.print(p1);
        System.out.println(p1.getFitness());
        for(int i=0; i<10; i++)System.out.println(solution[i]);
    }

}
